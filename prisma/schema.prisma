generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  meals         Meal[]
  insulinDoses  InsulinDose[]
  measurements  Measurement[]

  firstName String
  lastName  String

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Meal {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  name         String
  description  String?
  measurements Measurement[]
  insulinDoses InsulinDose[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([name, userId])
}

model Measurement {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  meal   Meal?   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId String? @db.ObjectId

  insulinDose InsulinDose? // 1:1 back-reference

  beforeMeal SugarReading?
  afterMeal  SugarReading?

  mealType   String // explicitly saved here
  date       DateTime
  dateString String // custom type to store only the date (e.g., "2025-04-28")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // This enforces 1 per user/meal/date
  @@unique([userId, mealId, mealType, dateString])
}

model InsulinDose {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  measurement   Measurement? @relation(fields: [measurementId], references: [id], onDelete: Cascade)
  measurementId String?      @unique @db.ObjectId // Enforce 1:1

  meal   Meal?   @relation(fields: [mealId], references: [id], onDelete: Cascade)
  mealId String? @db.ObjectId

  date       DateTime
  dateString String // custom type to store only the date (e.g., "2025-04-28")

  units Float
  type  String
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type SugarReading {
  value     Float
  note      String?
  createdAt DateTime @default(now())
}
